// Code generated by protoc-gen-gogo.
// source: msg.proto
// DO NOT EDIT!

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		msg.proto

	It has these top-level messages:
		T_Operation
		T_UserOperation
		UploadOperation
		RelayOperation
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Index int32

const (
	Index_Index_Unknow          Index = 0
	Index_Index_UploadOperation Index = 1
	Index_Index_RelayOperation  Index = 2
)

var Index_name = map[int32]string{
	0: "Index_Unknow",
	1: "Index_UploadOperation",
	2: "Index_RelayOperation",
}
var Index_value = map[string]int32{
	"Index_Unknow":          0,
	"Index_UploadOperation": 1,
	"Index_RelayOperation":  2,
}

func (x Index) String() string {
	return proto.EnumName(Index_name, int32(x))
}
func (Index) EnumDescriptor() ([]byte, []int) { return fileDescriptorMsg, []int{0} }

// 操作
type E_Operation int32

const (
	E_Operation_Unknow        E_Operation = 0
	E_Operation_MoveJoyStick  E_Operation = 1
	E_Operation_ShootJoyStick E_Operation = 2
)

var E_Operation_name = map[int32]string{
	0: "Unknow",
	1: "MoveJoyStick",
	2: "ShootJoyStick",
}
var E_Operation_value = map[string]int32{
	"Unknow":        0,
	"MoveJoyStick":  1,
	"ShootJoyStick": 2,
}

func (x E_Operation) String() string {
	return proto.EnumName(E_Operation_name, int32(x))
}
func (E_Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptorMsg, []int{1} }

// 操作数据
type T_Operation struct {
	Op     E_Operation `protobuf:"varint,1,opt,name=Op,proto3,enum=pb.E_Operation" json:"Op,omitempty"`
	Param1 []float64   `protobuf:"fixed64,2,rep,packed,name=Param1" json:"Param1,omitempty"`
}

func (m *T_Operation) Reset()                    { *m = T_Operation{} }
func (m *T_Operation) String() string            { return proto.CompactTextString(m) }
func (*T_Operation) ProtoMessage()               {}
func (*T_Operation) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{0} }

func (m *T_Operation) GetOp() E_Operation {
	if m != nil {
		return m.Op
	}
	return E_Operation_Unknow
}

func (m *T_Operation) GetParam1() []float64 {
	if m != nil {
		return m.Param1
	}
	return nil
}

// 角色操作数据
type T_UserOperation struct {
	UID       uint64         `protobuf:"varint,1,opt,name=UID,proto3" json:"UID,omitempty"`
	Operation []*T_Operation `protobuf:"bytes,2,rep,name=Operation" json:"Operation,omitempty"`
}

func (m *T_UserOperation) Reset()                    { *m = T_UserOperation{} }
func (m *T_UserOperation) String() string            { return proto.CompactTextString(m) }
func (*T_UserOperation) ProtoMessage()               {}
func (*T_UserOperation) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{1} }

func (m *T_UserOperation) GetUID() uint64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *T_UserOperation) GetOperation() []*T_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// C->S 上传操作
type UploadOperation struct {
	FrameIndex uint32         `protobuf:"varint,1,opt,name=FrameIndex,proto3" json:"FrameIndex,omitempty"`
	Operation  []*T_Operation `protobuf:"bytes,2,rep,name=Operation" json:"Operation,omitempty"`
}

func (m *UploadOperation) Reset()                    { *m = UploadOperation{} }
func (m *UploadOperation) String() string            { return proto.CompactTextString(m) }
func (*UploadOperation) ProtoMessage()               {}
func (*UploadOperation) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{2} }

func (m *UploadOperation) GetFrameIndex() uint32 {
	if m != nil {
		return m.FrameIndex
	}
	return 0
}

func (m *UploadOperation) GetOperation() []*T_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// S->C 同步操作
type RelayOperation struct {
	FrameIndex uint32             `protobuf:"varint,1,opt,name=FrameIndex,proto3" json:"FrameIndex,omitempty"`
	FrameStep  uint32             `protobuf:"varint,2,opt,name=FrameStep,proto3" json:"FrameStep,omitempty"`
	FrameTime  uint32             `protobuf:"varint,3,opt,name=FrameTime,proto3" json:"FrameTime,omitempty"`
	Users      []*T_UserOperation `protobuf:"bytes,5,rep,name=Users" json:"Users,omitempty"`
}

func (m *RelayOperation) Reset()                    { *m = RelayOperation{} }
func (m *RelayOperation) String() string            { return proto.CompactTextString(m) }
func (*RelayOperation) ProtoMessage()               {}
func (*RelayOperation) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{3} }

func (m *RelayOperation) GetFrameIndex() uint32 {
	if m != nil {
		return m.FrameIndex
	}
	return 0
}

func (m *RelayOperation) GetFrameStep() uint32 {
	if m != nil {
		return m.FrameStep
	}
	return 0
}

func (m *RelayOperation) GetFrameTime() uint32 {
	if m != nil {
		return m.FrameTime
	}
	return 0
}

func (m *RelayOperation) GetUsers() []*T_UserOperation {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*T_Operation)(nil), "pb.T_Operation")
	proto.RegisterType((*T_UserOperation)(nil), "pb.T_UserOperation")
	proto.RegisterType((*UploadOperation)(nil), "pb.UploadOperation")
	proto.RegisterType((*RelayOperation)(nil), "pb.RelayOperation")
	proto.RegisterEnum("pb.Index", Index_name, Index_value)
	proto.RegisterEnum("pb.E_Operation", E_Operation_name, E_Operation_value)
}
func (m *T_Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *T_Operation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Op))
	}
	if len(m.Param1) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Param1)*8))
		for _, num := range m.Param1 {
			f1 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f1)
			i++
			dAtA[i] = uint8(f1 >> 8)
			i++
			dAtA[i] = uint8(f1 >> 16)
			i++
			dAtA[i] = uint8(f1 >> 24)
			i++
			dAtA[i] = uint8(f1 >> 32)
			i++
			dAtA[i] = uint8(f1 >> 40)
			i++
			dAtA[i] = uint8(f1 >> 48)
			i++
			dAtA[i] = uint8(f1 >> 56)
			i++
		}
	}
	return i, nil
}

func (m *T_UserOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *T_UserOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.UID))
	}
	if len(m.Operation) > 0 {
		for _, msg := range m.Operation {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UploadOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrameIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.FrameIndex))
	}
	if len(m.Operation) > 0 {
		for _, msg := range m.Operation {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RelayOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrameIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.FrameIndex))
	}
	if m.FrameStep != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.FrameStep))
	}
	if m.FrameTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.FrameTime))
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Msg(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Msg(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *T_Operation) Size() (n int) {
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovMsg(uint64(m.Op))
	}
	if len(m.Param1) > 0 {
		n += 1 + sovMsg(uint64(len(m.Param1)*8)) + len(m.Param1)*8
	}
	return n
}

func (m *T_UserOperation) Size() (n int) {
	var l int
	_ = l
	if m.UID != 0 {
		n += 1 + sovMsg(uint64(m.UID))
	}
	if len(m.Operation) > 0 {
		for _, e := range m.Operation {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *UploadOperation) Size() (n int) {
	var l int
	_ = l
	if m.FrameIndex != 0 {
		n += 1 + sovMsg(uint64(m.FrameIndex))
	}
	if len(m.Operation) > 0 {
		for _, e := range m.Operation {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *RelayOperation) Size() (n int) {
	var l int
	_ = l
	if m.FrameIndex != 0 {
		n += 1 + sovMsg(uint64(m.FrameIndex))
	}
	if m.FrameStep != 0 {
		n += 1 + sovMsg(uint64(m.FrameStep))
	}
	if m.FrameTime != 0 {
		n += 1 + sovMsg(uint64(m.FrameTime))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func sovMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *T_Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: T_Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: T_Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= (E_Operation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.Param1 = append(m.Param1, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.Param1 = append(m.Param1, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Param1", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *T_UserOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: T_UserOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: T_UserOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = append(m.Operation, &T_Operation{})
			if err := m.Operation[len(m.Operation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameIndex", wireType)
			}
			m.FrameIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = append(m.Operation, &T_Operation{})
			if err := m.Operation[len(m.Operation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameIndex", wireType)
			}
			m.FrameIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameStep", wireType)
			}
			m.FrameStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameStep |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameTime", wireType)
			}
			m.FrameTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &T_UserOperation{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg.proto", fileDescriptorMsg) }

var fileDescriptorMsg = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x4a, 0x33, 0x31,
	0x14, 0xfd, 0x92, 0x7e, 0x2d, 0xf4, 0xf6, 0x2f, 0xc6, 0x1f, 0x22, 0xc8, 0x58, 0xba, 0xaa, 0x05,
	0x0b, 0xea, 0xde, 0x85, 0x68, 0xa1, 0x82, 0x56, 0xd2, 0xce, 0x7a, 0xcc, 0xd8, 0xa0, 0x43, 0x3b,
	0x93, 0x30, 0x33, 0xa8, 0x7d, 0x12, 0x5f, 0xc9, 0xa5, 0x8f, 0x20, 0xf3, 0x24, 0x32, 0x99, 0x32,
	0x3f, 0x3b, 0xdd, 0xdd, 0x7b, 0xce, 0xcd, 0x39, 0x37, 0x27, 0x81, 0xa6, 0x1f, 0x3d, 0x8f, 0x75,
	0xa8, 0x62, 0x45, 0xb1, 0x76, 0x07, 0x13, 0x68, 0x2d, 0x9c, 0x99, 0x96, 0xa1, 0x88, 0x3d, 0x15,
	0xd0, 0x63, 0xc0, 0x33, 0xcd, 0x50, 0x1f, 0x0d, 0xbb, 0xe7, 0xbd, 0xb1, 0x76, 0xc7, 0x37, 0x05,
	0xc9, 0xf1, 0x4c, 0xd3, 0x03, 0x68, 0x3c, 0x88, 0x50, 0xf8, 0x67, 0x0c, 0xf7, 0x6b, 0x43, 0xc4,
	0xb7, 0xdd, 0x80, 0x43, 0x6f, 0xe1, 0xd8, 0x91, 0x0c, 0x0b, 0x2d, 0x02, 0x35, 0x7b, 0x7a, 0x6d,
	0xc4, 0xfe, 0xf3, 0xb4, 0xa4, 0xa7, 0xd0, 0xcc, 0x69, 0x73, 0xbe, 0x95, 0x99, 0x94, 0x36, 0xe0,
	0xc5, 0xc4, 0xe0, 0x11, 0x7a, 0xb6, 0x5e, 0x2b, 0xb1, 0x2c, 0x34, 0x2d, 0x80, 0x49, 0x28, 0x7c,
	0x39, 0x0d, 0x96, 0xf2, 0xdd, 0x48, 0x77, 0x78, 0x09, 0xf9, 0xab, 0xc3, 0x07, 0x82, 0x2e, 0x97,
	0x6b, 0xb1, 0xf9, 0xbd, 0xc3, 0x11, 0x34, 0x4d, 0x37, 0x8f, 0xa5, 0x66, 0xd8, 0xd0, 0x05, 0x90,
	0xb3, 0x0b, 0xcf, 0x97, 0xac, 0x56, 0x62, 0x53, 0x80, 0x9e, 0x40, 0x3d, 0x8d, 0x28, 0x62, 0x75,
	0xb3, 0xd9, 0x6e, 0xb6, 0x59, 0x25, 0x35, 0x9e, 0x4d, 0x8c, 0xee, 0xa1, 0x9e, 0xf9, 0x11, 0x68,
	0x9b, 0xc2, 0xb1, 0x83, 0x55, 0xa0, 0xde, 0xc8, 0x3f, 0x7a, 0x08, 0xfb, 0x5b, 0xa4, 0x1a, 0x0e,
	0x41, 0x94, 0xc1, 0x5e, 0x46, 0x55, 0x2f, 0x45, 0xf0, 0xe8, 0x12, 0x5a, 0xa5, 0xa7, 0xa4, 0x00,
	0x8d, 0x5c, 0x8f, 0x40, 0xfb, 0x4e, 0xbd, 0xca, 0x5b, 0xb5, 0x99, 0xc7, 0xde, 0xd3, 0x8a, 0x20,
	0xba, 0x03, 0x9d, 0xf9, 0x8b, 0x52, 0x71, 0x0e, 0xe1, 0xab, 0xf6, 0x67, 0x62, 0xa1, 0xaf, 0xc4,
	0x42, 0xdf, 0x89, 0x85, 0xdc, 0x86, 0xf9, 0x40, 0x17, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08,
	0xef, 0x7b, 0xcb, 0x4d, 0x02, 0x00, 0x00,
}
